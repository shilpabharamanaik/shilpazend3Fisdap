<?php

namespace Fisdap\Doctrine\Extensions\DoctrineCommand;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\BufferedOutput;
use Symfony\Component\Console\Input\InputOption;
use Doctrine\ORM;

/**
 * Task for adding UUID columns to existing entities as part of a migration to UUIDs
 *
 * @author Jesse Mortenson <jmortenson@fisdap.net>
 */
class AddUuidsCommand extends Command
{
    use EntityModificationUtilities;

    /**
     * @var bool Should we change files on the filesystem?
     */
    protected $fileChanges = TRUE;

    /**
     * @var array Array of target entities for adding UUID properties
     */
    protected $targetEntities;

    /**
     * @var string Name of the uuid property that will be added to entities.
     */
    protected $uuidPropertyName = 'uuid';

    /**
     * @var array Array of entity classes as keys, values are either NULL or the metadata, if loaded
     */
    protected $allMetadata = [];

    /**
     * @var string Help text that can be put in code comments indicating that code was auto-generated
     */
    protected $autogeneratedHelpText = '(automatically generated by add-uuids)';

    /**
     * @var string Any migration code generated during entity modification for *applying* the migration
     */
    protected $migrationUpCode = '';

    /**
     * @var string Any migration code generated during entity modification for *UNapplying* the migration
     */
    protected $migrationDownCode = '';

    /**
     * @var boolean Should migration code use Percona Online Schema Change syntax?
     */
    protected $usePerconaOnlineSchemaChange = FALSE;

    /**
     * @var object Doctrine entity manager
     */
    protected $em;

    /**
     * {@inheritdoc}
     */
    protected function configure()
    {
        $this
            ->setName('doctrine-extensions:add-uuids')
            ->setDescription('Adds UUID properties to existing entities as part of a migration to UUIDs')
            ->setDefinition(array(
                new InputArgument('uuid-property-name', InputArgument::OPTIONAL, 'The name of the property that will be added to entities, default: uuid'),
                new InputArgument('entities', InputArgument::IS_ARRAY, 'List of full entity names in quotes, ie: "Fisdap\\Entity\\ShiftLegacy".'),
            ))
            ->addOption('do-relationships', null, InputOption::VALUE_NONE, 'If set, find all entities with an association on the target entities\' @id property and add UUID-relationship columns to them')
            ->addOption('no-file-changes', null, InputOption::VALUE_NONE, 'If set, do not actually make file changes. Useful for testing')
            ->addOption('use-pt-online-schema-change', null, InputOption::VALUE_NONE, 'If set, generate migration code that uses pt-online-schema-change')
            ->setHelp(<<<EOT
Adds UUID properties to existing entities as part of a migration to UUIDs. Modifies the entities and generates a Doctrine Migration
EOT
            );
    }

    /**
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        // ARGUMENT CHECKS
        // check if we have necessary arguments
        if (($this->targetEntities = $input->getArgument('entities')) === null) {
            throw new \RuntimeException("Argument 'entities' is required in order to execute this command correctly.");
        }
        if ($input->getArgument('uuid-property-name') !== null) {
            $this->uuidPropertyName = $input->getArgument('uuid-property-name');
        }
        if ($input->getOption('no-file-changes')) {
            $this->fileChanges = FALSE; // do not make file changes, ie testing mode
        }
        if ($input->getOption('use-pt-online-schema-change')) {
            $this->usePerconaOnlineSchemaChange = TRUE;
        }

        // CONSTRUCTION STUFF
        // Get the entity manager and available entity class names
        $this->em = $this->getHelper('em')->getEntityManager();

        // this is a flat array of values like 'Fisdap\\Entity\\Window'
        $entityClassNames = $this->em->getConfiguration()
            ->getMetadataDriverImpl()
            ->getAllClassNames();

        // Get metadata for each entity
        foreach ($entityClassNames as $class) {
            $this->loadMetaDataForEntityClass($class);
        }

        // DO WORK
        // modify TARGET entities & generate migration code
        foreach($this->targetEntities as $entityClass) {
            $this->addUuidToEntity($entityClass);
            $this->generateMigrationCode($entityClass);

            if ($input->getOption('do-relationships')) {
                // modify AFFECTED entities & generate migration code
                $this->addUuidToRelatedEntities($entityClass);
            }
        }


        // Write a new Doctrine Migration
        $this->createDoctrineMigrationFile(
            $this->migrationUpCode,
            $this->migrationDownCode,
            $this->usePerconaOnlineSchemaChange
        );

    }

    /**
     * Do the modification/migration work for entities RELATED to an entity class, based on the class' @id property
     *
     * @param $entityClass string Entity class (needs to be instantiable via new \ReflectionClass($entityClass)
     * @throws \Exception
     */
    private function addUuidToRelatedEntities($entityClass) {
        // Identify the @id column fo the entity
        $identifiers = $this->allMetadata[$entityClass]->getIdentifierFieldNames();
        if (count($identifiers) > 1) {
            throw new \Exception("Entity {$entityClass} has more than one identifer field. Cannot handle relationships for it.");
        } else {
            $idColumn = current($identifiers);
        }

        // find all associations (list-associations command)
        // Run the generate migration command (\Doctrine\DBAL\Migrations\Tools\Console\Command\GenerateCommand())
        $listAssociationsCommand = $this->getApplication()->find('doctrine-extensions:list-associations');
        $listAssociationsCommandOutput = new BufferedOutput();
        $listAssociationsCommandInput = new ArrayInput(array(
            'command' => 'migrations:generate',
            'entity' => $entityClass,
            'property' => $idColumn,
        ));
        $resultCode = $listAssociationsCommand->run($listAssociationsCommandInput, $listAssociationsCommandOutput);
        $relatedEntities = [];
        if ($resultCode == 0) {
            $listAssociationsCommandOutput = json_decode($listAssociationsCommandOutput->fetch());
            foreach($listAssociationsCommandOutput->onEntity as $relatedEntity => $properties) {
                $relatedEntities[$relatedEntity] = $properties;
            }
            foreach($listAssociationsCommandOutput->onOthers as $relatedEntity => $properties) {
                $relatedEntities[$relatedEntity] = $properties;
            }
        }

        // add uuid to each one
        foreach ($relatedEntities as $relatedEntityClass => $properties) {
            foreach($properties as $property) {
                $propertyPrefix = $property . '_';
                $entityReflection = new \ReflectionClass($relatedEntityClass);
                $entityCodeString = $this->readEntityFileFromReflection($entityReflection);
                // Add the property
                $entityCodeString = $this->addUuidPropertyToEntity($entityCodeString, $propertyPrefix);
                // Overwrite the file with new version
                if ($this->fileChanges) {
                    file_put_contents($entityReflection->getFileName(), $entityCodeString);
                }

                // make migration code
                $this->generateMigrationCode($relatedEntityClass, $propertyPrefix, FALSE);
            }
        }
    }

    /**
     * Read, modify, and write a modified version of the entity PHP file.
     *
     * @param $entityClass string Entity class (needs to be instantiable via new \ReflectionClass($entityClass)
     */
    private function addUuidToEntity($entityClass) {
        //fwrite(STDOUT, $entityClass . PHP_EOL); exit;
        $entityReflection = new \ReflectionClass($entityClass);
        $entityCodeString = $this->readEntityFileFromReflection($entityReflection);

        // Add the property
        $entityCodeString = $this->addUuidPropertyToEntity($entityCodeString);

        // Make sure entity definition docblock contains lifecycle callback
        if (stripos($entityCodeString, "@HasLifecycleCallbacks") === FALSE) {
            $entityCodeString = $this->addLifecycleCallbackAnnotationToEntity($entityCodeString);
        }

        // Add the UUID generator PrePersist lifecycle callback
        // (we can't use a auto-generation strategy because the uuid column isn't @id (only one @id per entity)
        $entityCodeString = $this->addPrePersistToEntity($entityCodeString);

        // Overwrite the file with new version
        if ($this->fileChanges) {
            file_put_contents($entityReflection->getFileName(), $entityCodeString);
        }
    }

    /**
     * Create the doctrine Migration code for this entity
     *
     * @param $entityClass string Entity class (needs to be instantiable via new \ReflectionClass($entityClass)
     * @param $propertyPrefix string A prefix to be added to the property name that will be created on the entity
     * @param $unique boolean Should indexes created be set to UNIQUE?
     */
    private function generateMigrationCode($entityClass, $propertyPrefix = '', $unique = TRUE) {
        $tableName = $this->allMetadata[$entityClass]->getTableName();
        if ($this->usePerconaOnlineSchemaChange) {
            $this->generateOnlineSchemaChangeMigrationCode($entityClass, $tableName, $propertyPrefix, $unique);
        } else {
            $this->generateConventionalMigrationCode($entityClass, $tableName, $propertyPrefix, $unique);
        }
    }

    private function generateConventionalMigrationCode($entityClass, $tableName, $propertyPrefix = '', $unique = TRUE) {
        if ($unique) {
            $uniqueString = 'UNIQUE';
            $indexKeyPrefix = 'uniq_';
        } else {
            $uniqueString = $indexKeyPrefix = '';
        }
        $this->migrationUpCode .= <<<EOT


        // {$entityClass} {$this->autogeneratedHelpText}
        \$this->addSql('ALTER TABLE {$tableName} ADD COLUMN {$propertyPrefix}{$this->uuidPropertyName} BINARY(16) DEFAULT NULL');
        \$this->addSql('CREATE {$uniqueString} INDEX {$indexKeyPrefix}{$propertyPrefix}{$this->uuidPropertyName} ON {$tableName} ({$propertyPrefix}{$this->uuidPropertyName})');
EOT;
        $this->migrationDownCode .= <<<EOT


        // {$entityClass} {$this->autogeneratedHelpText}
        \$this->addSql('ALTER TABLE {$tableName} DROP COLUMN {$propertyPrefix}{$this->uuidPropertyName}');
EOT;

    }

    private function generateOnlineSchemaChangeMigrationCode($entityClass, $tableName, $propertyPrefix = '', $unique = TRUE) {
        if ($unique) {
            $uniqueString = 'UNIQUE';
            $indexKeyPrefix = 'uniq_';
        } else {
            $uniqueString = $indexKeyPrefix = '';
        }
        $this->migrationUpCode .= <<<EOT


        // {$entityClass} {$this->autogeneratedHelpText}
        \$this->alterTableWithOnlineSchemaChange('{$tableName}', 'ADD COLUMN {$propertyPrefix}{$this->uuidPropertyName} BINARY(16) DEFAULT NULL');
        \$this->alterTableWithOnlineSchemaChange('{$tableName}', 'ADD {$uniqueString} INDEX {$indexKeyPrefix}{$propertyPrefix}{$this->uuidPropertyName} ({$propertyPrefix}{$this->uuidPropertyName})');
EOT;

        $this->migrationDownCode .= <<<EOT


        // {$entityClass} {$this->autogeneratedHelpText}
        \$this->alterTableWithOnlineSchemaChange('{$tableName}', 'DROP COLUMN {$propertyPrefix}{$this->uuidPropertyName}');
EOT;
    }


    /**
     * @param $entityCodeString string Contents of the entity PHP file
     * @param $propertyPrefix string A prefix to be added to the property name that will be created on the entity
     * @return string Modified contents of the entity PHP file
     */
    private function addUuidPropertyToEntity($entityCodeString, $propertyPrefix = '')
    {
        $propertyCode = <<<EOT

    /**
     * UUID column {$this->autogeneratedHelpText}
     *
     * @Column(name="{$propertyPrefix}{$this->uuidPropertyName}", type="uuid", length=16, unique=true, nullable=true)
     */
     protected \${$propertyPrefix}{$this->uuidPropertyName};

EOT;
        $classPos = stripos($entityCodeString, "\nclass");
        $bracketPosAfterClassPos = stripos($entityCodeString, "{", $classPos);
        $entityCodeString = substr_replace($entityCodeString, $propertyCode, ($bracketPosAfterClassPos + 1), 0);
        return $entityCodeString;
    }

    /**
     * @param $entityCodeString
     * @return mixed
     */
    private function addLifecycleCallbackAnnotationToEntity($entityCodeString)
    {
        $lifecycleCallbackCode = <<<EOT

 * @HasLifecycleCallbacks
EOT;
        $entityAnnotationPos = stripos($entityCodeString, "@Entity");
        $lineAfterEntityAnnotationPos = stripos($entityCodeString, "\n", $entityAnnotationPos);
        $entityCodeString = substr_replace($entityCodeString, $lifecycleCallbackCode, $lineAfterEntityAnnotationPos, 0);
        return $entityCodeString;
    }

    /**
     * @param $entityCodeString
     * @return mixed
     */
    private function addPrePersistToEntity($entityCodeString, $propertyPrefix = '')
    {
        $uuidGenerateCallback = <<<EOT


    /**
     * Generate UUID in PrePersist lifecycle callback {$this->autogeneratedHelpText}
     * @PrePersist
     */
    public function generateUuidLifecycleCallback()
    {
        \$this->{$this->uuidPropertyName} = \Fisdap\Doctrine\Extensions\ColumnType\UuidType::generateUuid();
    }

EOT;
        $lastBracketPos = strrpos($entityCodeString, '}');
        $entityCodeString = substr_replace($entityCodeString, $uuidGenerateCallback, ($lastBracketPos - 1), 0);
        return $entityCodeString;
    }



}