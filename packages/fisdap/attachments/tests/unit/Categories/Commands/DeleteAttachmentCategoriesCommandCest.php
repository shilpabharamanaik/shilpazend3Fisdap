<?php

use Fisdap\Attachments\Categories\Commands\Deletion\DeleteAttachmentCategoriesCommand;
use Fisdap\Attachments\Categories\Entity\AttachmentCategory;


/**
 * Class DeleteAttachmentCategoriesCommandCest
 * 
 * @author  Ben Getsug <bgetsug@fisdap.net>
 */
class DeleteAttachmentCategoriesCommandCest extends AttachmentCategoryCommandCestTemplate
{
    public function _before(UnitTester $I)
    {
        parent::_before($I);
    }


    public function it_can_delete_attachment_categories_by_id(UnitTester $I)
    {
        // arrange
        $command = new DeleteAttachmentCategoriesCommand('fake', [1]);

        $this->attachmentTypeMapperMock->shouldReceive('getAttachmentCategoryEntityClassName')->once()
            ->andReturn(AttachmentCategory::class);

        $this->repositoryMock->shouldReceive('destroyCollection')->with([1])->andReturn(1);

        $this->loggerMock->shouldReceive('info')->once();

        // act
        $deleteCount = $command->handle(
            $this->attachmentTypeMapperMock,
            $this->repositoryMock,
            $this->loggerMock
        );

        // assert
        $I->assertEquals(1, $deleteCount);
    }


    public function it_can_delete_attachment_categories_by_name(UnitTester $I)
    {
        // arrange
        $command = new DeleteAttachmentCategoriesCommand('fake', null, ['foo']);

        $this->attachmentTypeMapperMock->shouldReceive('getAttachmentCategoryEntityClassName')->once()
            ->andReturn(AttachmentCategory::class);

        /** @var AttachmentCategory|Mockery\mock $fakeAttachmentCategory */
        $fakeAttachmentCategory = new AttachmentCategory('foo');

        // force set id, as these would normally be auto-generated by the database
        $fakeAttachmentCategoryReflection = new ReflectionObject($fakeAttachmentCategory);
        $fakeAttachmentCategoryId = $fakeAttachmentCategoryReflection->getProperty('id');
        $fakeAttachmentCategoryId->setAccessible(true);
        $fakeAttachmentCategoryId->setValue($fakeAttachmentCategory, 1);

        $this->repositoryMock->shouldReceive('getByNameAndType')->once()->andReturn([$fakeAttachmentCategory]);

        $this->repositoryMock->shouldReceive('destroyCollection')->with([1])->andReturn(1);

        $this->loggerMock->shouldReceive('info')->once();

        // act
        $deleteCount = $command->handle(
            $this->attachmentTypeMapperMock,
            $this->repositoryMock,
            $this->loggerMock
        );

        // assert
        $I->assertEquals(1, $deleteCount);
    }


    public function it_throws_an_exception_when_both_ids_and_names_are_null(UnitTester $I)
    {
        // assert
        $I->assertTrue(
            $I->seeExceptionThrown(\Exception::class, function() {
                // arrange/act
                new DeleteAttachmentCategoriesCommand('fake');
            })
        );
    }
}