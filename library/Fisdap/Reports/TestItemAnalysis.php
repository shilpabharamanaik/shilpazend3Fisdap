<?php
/**
 * Class Fisdap_Reports_TestItemAnalysis
 * The Test Item Analysis report!
 * @author jmortenson
 */
class Fisdap_Reports_TestItemAnalysis extends Fisdap_Reports_Report
{
    const CORRECT_RESPONSE_LEGEND_TEXT = <<<'EOT'
The first distractor listed is always the correct answer and is marked with an asterisk.
EOT;

    const QUESTION_RESPONSE_DISCREPANCY_WARNING = <<<'EOT'
Over time, we've made changes to items on our tests (such as AHA guideline updates or responding to data from item analysis, etc.).
When an item is changed, this report recognizes it as a new, distinct item and cannot combine versions for a valid item analysis.
<br /><br />
Items that have been changed are highlighted in yellow. To produce a clean report that does not include results for edited
items, use the filters to exclude test attempts prior to
EOT;

    const DEFINITION_POINT_BISERIAL = <<<'EOT'
<p><strong>Point Biserial</strong> - the degree to which the students' responses
            and their overall exam scores are related.
            Values range from -1 to 1.
            Correct answers should have values over .12; the higher, the better.
            Incorrect answers (distractors) should have negative values.
            This shows how related a single question is to the entire exam.</p>
EOT;

    const DEFINITION_DIFFICULTY_INDEX = <<<'EOT'
<p><strong>Difficulty Index</strong> - the percentage of students who got the item correct.
Values range from 0% to 100%.
Items below 40% or over 90% should be flagged for attention.
The exam is balanced as a whole with Knowledge, Application and Problem-Solving items.
It is expected that some items will have a low difficulty index.</p>
EOT;

    const DEFINITION_CRONBACHS_ALPHA = <<<'EOT'
            <p><strong>Cronbach's Alpha</strong> - a measure of the exam's internal consistency (reliability).
Values range from 0 to 1; the higher, the better.
Exams rated higher than 0.65 have high reliability and can expect reproducible results.
This shows whether all items on the exam are assessing the same thing.</p>
EOT;


    /**
     * @var null unprocessed/unformatted results from R statistical analysis
     */
    public $rAnalysisResults = null;

    /**
     * @var int $totalAttempts The number of quiz attempts found within the scope of this report
     */
    public $totalAttempts = 0;

    /**
     * @var int $averageScore The average test score
     */
    public $averageScore = 0;

    /**
     * @var null counts for how many times each distractor was chosen for each question on this test
     */
    public $distractorChoiceCounts = null;

    /**
     * @var null Array containing the national stats for this test as generated by R
     */
    public $nationalRResult = null;

    /**
     * @var null Array containing the national question answer counts for each question on this test
     */
    public $nationalDistractorCounts = null;

    /**
     * @var null Array containing the national summary stats (total attempts, average) for this test
     */
    public $nationalSummary = null;

    /**
     * @var null The type of pool of users we will query. Either 'all', 'byProgram', or 'byUsername'
     */
    private $userPoolType = null;

    /**
     * @var null The criteria we will use to query the pool of users. Either empty array (all), array of program IDs (byProgram) or array of usernames (byUsername)
     */
    private $userPoolCriteria = null;
    
    /**
     * @var string Standard report property: header HTML content
     */
    public $header = '';

    /**
     * @var string Standard report property: footer HTML content
     */
    public $footer = '';

    /**
     * @var array Standard report property: array of stylesheets
     */
    public $styles = array(
        '/css/library/Fisdap/Reports/test-item-analysis.css'
    );

    /**
     * @var array Standard report property: array of javascript ... scripts
     */
    public $scripts = array(
      '/js/library/Fisdap/Reports/test-item-analysis.js'
    );

    /**
     * @var array Standard report property: array defining components of the report configuration form
     */
    public $formComponents = array(

        'Fisdap_Reports_Form_SingleTestPicker' => array(
            'title' => 'Report options',
            'options' => array(
                'dateRange' => true, // show the date range
            ),
            'arguments' => array( // array of arguments to pass into Zend_Form constructor
                null, // $filters
                null, // $options
                array(  // $formOptions
                    'dateRange' => true,
                    //'excludeTests' => array(64,18,21,13,10001,10002,10005,10004,10011,10012,10014,10015,10040,10054,10055,10056,10059,10057,10058,10061,10043,10044,10060,10062,10064,10067,10069,10073,29,27,20022,20047), // exclude all retired exams that we don't want to show
                    'excludeTests' => array(64, 66, 71), //exclude entrance exam
                ),
            ),
        ),
        'multistudentPicklist' => array(
            'title' => 'Select one or more student(s)',
            'options' =>  array(
                'loadJSCSS' => true,
                'loadStudents' => true,
                'showTotal' => true,
                'studentVersion' => false,
                'includeAnon' => false,
                'useSessionFilters' => true,
                'sessionNamespace' => "ReportStudentFilter",
            ),
        ),
    );

    /**
     * @var \Fisdap\Entity\MoodleTestDataLegacy $test
     */
    public $test = null;

    public $attempt = 1;

    /**
     * @var \Zend_Filter_StripTag Zend StripTag text filter
     */
    public $stripTagsFilter = null;

    /**
     * @var \Zend_Filter_PregReplace Zend PregReplace text filter
     */
    public $stripSpecialCharsFilter = null;

    /**
     * @var mixed NULL if no discrepant question response data is found, otherwise string date of latest attempt with data discrepancy
     *
     * Does the data analyzed by this report include discrepancies in question responses? This is set to a date if,
     * for example, the report includes a quiz attempt for which one or more question responses
     * do not match the set of currently available question responses. This property is used to address a limitation in
     * the Moodle quiz/question attempt data. If question response options in Moodle are changed after some quiz
     * attempts have been made, it can result in discrepant data that cannot be properly analyzed. - Jesse
     */
    protected $latestDiscrepantQuestionResponseDate = null;

    /**
     * @var array Array of questions which, in this report's scope, have attempts' responses containing discrepant question response data
     *
     * See $this->latestDiscrepantQuestionResponseDate
     */
    public $questionsWithDiscrepantQuestionResponseData = array();

    /**
     * Construct: initialize Zend filter objects
     *
     * @param $report
     * @param array $config
     */
    public function __construct($report, $config = array())
    {
        parent::__construct($report, $config);

        $this->stripTagsFilter = new \Zend_Filter_StripTags();
        $this->stripSpecialCharsFilter = new \Zend_Filter_PregReplace(array(
            'match' => '/[^a-zA-Z0-9]/',
            'replace' => '',
        ));
    }


    /**
     * This report is only available to INSTRUCTORS ONLY
     * students are DISALLOWED
     */
    public static function hasPermission($userContext)
    {
        return $userContext->isInstructor();
    }

    /**
     * Run a query and any processing logic that produces the data contained in the report
     * Sets resulting tables as $this->data
     */
    public function runReport()
    {
        // Process the report configuration, check that values work, and create our query filter options
        $filter = $this->makeFilterFromConfig();

        // get score information for the selected students
        $questionResponses = $this->getQuestionResponses($filter); //$this->test->getQuestionResponses($studentUsernames, $options);
        if ($questionResponses['dataType'] == 'array' && empty($questionResponses['data'])) {
            // We do not have any test attempts for this selected group of students
            // set an "empty" table
            $this->data['empty'] = $this->makeNoResultsTable();
            return;
        }

        // get full list of question id => distractor info from moodle test
        $moodleDistractorInfo = $this->test->get_moodleDistractors();

        // We also need to get the average score for these students on this test
        if (is_array($this->userPoolCriteria) && count($this->userPoolCriteria) > 0) {
            $attemptScores = \Fisdap\MoodleUtils::getExamScores('username', $this->userPoolCriteria, array($this->test), array('includeAttempts' => $this->attempt));
        } else {
            $attemptScores = \Fisdap\MoodleUtils::getExamScores('all', 'all', array($this->test), array('includeAttempts' => $this->attempt));
        }
        $totalScore = 0;
        foreach ($attemptScores as $attemptUser => $quizzes) {
            $totalScore += $quizzes[$this->test->moodle_quiz_id][$this->attempt];
            $this->totalAttempts++;
        }

        // If we have some attempts, get stats and make the tables
        if ($this->totalAttempts > 0) {

            // run data into R for calculations, via Rserve
            // R Result comes back as a multidimensional array with properties for each question in the exam
            $zendConfig = \Zend_Registry::get('config');
            if ($zendConfig->rserve->host) {
                $rStats = new \Util\RStats($zendConfig->rserve->host);
            } else {
                throw new Exception("Missing configuration value for RServe host, so cannot connect to RServe");
            }

            // process the resulting data so that it can be handled by R. Depends on whether data is in array or CSV
            if ($questionResponses['dataType'] == 'array') {
                // format the question responses data into the keys needed by our item analysis R script
                $responseDataFrame = $this->formatQuestionResponsesForItemAnalysis($questionResponses['data']);
                unset($questionResponses); // no longer need this data

                // make the R data frame string that we can send to our calculations
                $dataString = $rStats->makeRDataFrameText('data', $responseDataFrame);
            } elseif ($questionResponses['dataType'] == 'file') {
                // Data is in a CSV file, so we ask R to read it from there
                $dataString = 'data = read.csv("' . $questionResponses['fileName'] . '", header=TRUE)';
            }

            // present average score as whole number percentage. No scaling is done here.
            // Entrance exam has no overall score... might be an issue?
            $this->averageScore = round(($totalScore / $this->totalAttempts), 0) . '%';

            $pbsDiScript = $this->getItemAnalysisStatisticsRScript($dataString);
            $cronbachScript = $this->getCronbachRScript($dataString);
            $pbsDiResults = $rStats->runRScript($pbsDiScript); // actually runs the R calculations
            $cronbachResults = $rStats->runRScript($cronbachScript);
            $this->rAnalysisResults = array('pbsDi' => $pbsDiResults, 'cronbach' => $cronbachResults);

            // R calculation is done. Remove the temporary CSV file if one was created
            $debugMode = false;
            // debug mode sends an email and retains any CSV file instead of deleting it
            if ($questionResponses['dataType'] == 'file' && !$debugMode) {
                unlink($questionResponses['fileName']); // delete the CSV file
            }
            if ($debugMode) { // DEBUG ONLY!! this is disabled usually
                $this->sendStatsDebugMail($questionResponses, $pbsDiScript, $cronbachScript);
            }

            // Get the R Results for the national statistics on this test, so natl data can be included in output
            // data is stored in cache because generating national stats is slow
            $cacheManager = Zend_Registry::get('zendCacheManager');
            $cache = $cacheManager->getCache('default');

            $this->nationalRResult = $cache->load('nationalTestStats_results_for_testID_' . $this->config['test_id']); // FALSE if there is a cache miss
            $this->nationalDistractorCounts = $cache->load('nationalTestStats_distractor_counts_for_testID_' . $this->config['test_id']);
            $this->nationalSummary = $cache->load('nationalTestStats_summary_for_testID_' . $this->config['test_id']);

            // find out which distractor code options were available in this exam
            $distractors = array();
            foreach ($this->rAnalysisResults['pbsDi'] as $key => $results) {
                if (stripos($key, 'Option ') === 0) {
                    $distractor = substr($key, 7, 1);
                    $distractors[$distractor] = $distractor;
                }
            }
            sort($distractors);

            // Set the report's header content
            $this->setHeaderContent();

            // Create test-wide analysis table
            $this->setSummaryTable();

            // create stats tables
            if (is_array($this->rAnalysisResults)
                && isset($this->rAnalysisResults['pbsDi'])
                && isset($this->rAnalysisResults['pbsDi']['Question'])
            ) {
                $this->setAllStatsTables($distractors, $moodleDistractorInfo);
            }
        }
    }

    /**
     * Set the report's header content ($this->header) with statistics definitions & the (hidden) "flag item" modal
     */
    private function setHeaderContent()
    {
        $this->header = '<div class="test-item-analysis-defs"><h3 class="section-header">Key</h3>';
        $this->header .= '<p>' . $this::CORRECT_RESPONSE_LEGEND_TEXT . '</p>' . $this::DEFINITION_POINT_BISERIAL . $this::DEFINITION_DIFFICULTY_INDEX
            . $this::DEFINITION_CRONBACHS_ALPHA;
        if ($this->latestDiscrepantQuestionResponseDate != null) {
            $discrepantResponseDate = \DateTime::createFromFormat('Y-m-d', $this->latestDiscrepantQuestionResponseDate);
            $this->header .= '<p class="notice">' . $this::QUESTION_RESPONSE_DISCREPANCY_WARNING
                . ' ' . $discrepantResponseDate->format('n/d/Y')
                . '</p>';
        }
        $this->header .= '</div>';

        // add summary to top, with (initially) hidden "flag it" form
        $this->header .= '<div class="test-item-analysis-flag-form" title="Flag for review"><p>Please briefly describe your concerns with this item:</p>
                <form><fieldset><textarea name="message" cols="40" rows="6"></textarea>
                    <input type="hidden" name="item_id" value="0" /><input type="hidden" name="distractor-id" value="0" />
                    <input type="hidden" name="test_id" value="' . $this->test->moodle_quiz_id . '" />
                    </fieldset>
                </form>
                <p>The Fisdap Testing team will review your message and send you a reply.</p>

                <div class="buttons">

                    <div class="small green-buttons">
                        <a href="#" class="test-item-analysis-flag-save">Submit</a>
                    </div>

                    <div class="small gray-button">
                        <a href="#" class="test-item-analysis-flag-cancel">Cancel</a>
                    </div>

                </div>
            </div>';
    }

    /**
     * Set the statistics summary table on $this->data: test-wide cronbach's alpha, # of attempts, and avg score
     */
    private function setSummaryTable()
    {
        $cronbachsAlpha = (!is_nan($this->rAnalysisResults['cronbach'])) ? ltrim(round($this->rAnalysisResults['cronbach'], 2), '0') : '---';
        $nationalCronbachs = (isset($this->nationalRResult['cronbach']) && !is_nan($this->nationalRResult['cronbach'])) ? ltrim(round($this->nationalRResult['cronbach'], 2), '0') : '---';
        $this->data['test'] = array(
            'type' => 'table',
            'options' => array('noSort' => true, 'noSearch' => true, 'noInfo' => true, 'tableClass' => 'dataTable noInitDataTable'),
            'content' => array(
                'title' => $this->test->get_test_name(),
                'nullMsg' => 'None found.',
                'head' => array(
                    array(
                        '',
                        array(
                            'data' => '# of attempts',
                            'class' => 'center',
                        ),
                        array(
                            'data' => 'Average Score',
                            'class' => 'center',
                        ),
                        array(
                            'data' => 'Cronbach\'s Alpha',
                            'class' => 'center',
                        )
                    ),
                ),
                'body' => array(
                    array(
                        'Selected Group',
                        array(
                            'data' => $this->totalAttempts,
                            'class' => 'center',
                        ),
                        array(
                            'data' => number_format(round($this->averageScore, 2), 2),
                            'class' => 'center',
                        ),
                        array(
                            'data' => $cronbachsAlpha,
                            'class' => 'center',
                        ),
                    ),
                    array(
                        'National',
                        array(
                            'data' => (isset($this->nationalSummary['totalAttempts'])) ? $this->nationalSummary['totalAttempts'] : '---',
                            'class' => 'center',
                        ),
                        array(
                            'data' => (isset($this->nationalSummary['averageScore'])) ? number_format(round($this->nationalSummary['averageScore'], 2), 2) : '---',
                            'class' => 'center',
                        ),
                        array(
                            'data' => $nationalCronbachs,
                            'class' => 'center',
                        )
                    )
                ),
            )
        );
    }

    /**
     * Set all the per-question stats tables to $this->data. Loops through the questions in R analysis results and
     * performs additional calculations on each question.
     *
     * @param $distractors
     * @param $moodleDistractorInfo
     */
    private function setAllStatsTables($distractors, $moodleDistractorInfo)
    {
        foreach ($this->test->get_moodleQuestionIds() as $questionId) {
            $statsTableBody = array(); // reset the per-question stats body array

            // find the matching national and local R stats keys
            $nationalKey = $this->getMatchingRStatsQuestionKey($questionId, $this->nationalRResult);
            $localKey = $this->getMatchingRStatsQuestionKey($questionId, $this->rAnalysisResults);

            // process through the distractors
            $distractorSet = array();
            $correctDistractorPBS = $highestIncorrectDistractorPBS =
            $correctNationalDistractorPBS = $highestIncorrectNationalDistractorPBS = 0;
            foreach ($distractors as $distractor) {
                // find the matching Moodle distractor ID to the distractor code returned from R
                foreach ($moodleDistractorInfo[$questionId] as $moodleDistractor) {
                    if ($moodleDistractor['distractorCode'] == $distractor) {
                        $distractorId = $moodleDistractor['distractorMoodleId'];
                        if (intval($moodleDistractor['distractorFraction']) == 1) {
                            $distractorSet[$distractorId]['correct'] = true;
                        } else {
                            $distractorSet[$distractorId]['correct'] = false;
                        }
                    }
                }

                if (isset($this->rAnalysisResults['pbsDi']['Option ' . $distractor . ' - PBS'][$localKey])) {
                    $distractorSet[$distractorId]['pbs'] = (!is_nan($this->rAnalysisResults['pbsDi']['Option ' . $distractor . ' - PBS'][$localKey])) ? number_format(round($this->rAnalysisResults['pbsDi']['Option ' . $distractor . ' - PBS'][$localKey], 2), 2) : '---';
                } else {
                    $distractorSet[$distractorId]['pbs'] = '---';
                }
                $distractorSet[$distractorId]['nationalPbs'] = (!is_nan($this->nationalRResult['pbsDi']['Option ' . $distractor . ' - PBS'][$nationalKey])) ? number_format(round($this->nationalRResult['pbsDi']['Option ' . $distractor . ' - PBS'][$nationalKey], 2), 2) : '---';
                $distractorSet[$distractorId]['distractor'] = $distractor;
                if ($distractorSet[$distractorId]['correct']) {
                    $correctDistractorPBS = $distractorSet[$distractorId]['pbs'];
                    $correctNationalDistractorPBS = $distractorSet[$distractorId]['nationalPbs'];
                } else {
                    if ($distractorSet[$distractorId]['pbs'] > $highestIncorrectDistractorPBS) {
                        $highestIncorrectDistractorPBS = $distractorSet[$distractorId]['pbs'];
                    }
                    if ($distractorSet[$distractorId]['nationalPbs'] > $highestIncorrectNationalDistractorPBS) {
                        $highestIncorrectNationalDistractorPBS = $distractorSet[$distractorId]['nationalPbs'];
                    }
                }
            }

            // calculate total selections for distractors in this set
            $selectionTotal = $this->calculateDistractorSelectionTotal($this->distractorChoiceCounts[$questionId]);
            $selectionNationalTotal = $this->calculateDistractorSelectionTotal($this->nationalDistractorCounts[$questionId]);

            // Add distractor data to the table
            foreach ($distractorSet as $distractorId => $info) {
                $statsTableBody = $this->addDistractorRowToStatsTable($info, $highestIncorrectDistractorPBS, $correctDistractorPBS, $highestIncorrectNationalDistractorPBS, $correctNationalDistractorPBS, $distractorId, $questionId, $selectionTotal, $selectionNationalTotal, $statsTableBody);
            }

            // prepend the item row to the top of the table
            if (isset($this->rAnalysisResults['pbsDi']['Correct Response - Difficulty'][$localKey])) {
                $difficultyIndex = $this->rAnalysisResults['pbsDi']['Correct Response - Difficulty'][$localKey];
            } else {
                $difficultyIndex = '---';
            }
            $nationalDifficultyIndex = ($this->nationalRResult) ? $this->nationalRResult['pbsDi']['Correct Response - Difficulty'][$nationalKey] : '---';

            // comparisons on $difficultyIndex to see whether we should highlight that cell for review
            $questionItemRow = $this->makeQuestionItemRow($questionId, $difficultyIndex, $nationalDifficultyIndex);
            array_unshift($statsTableBody, $questionItemRow);

            // assign the table to the report data
            // if this item is affected by discrepant data in this report's scope, then highlight its title
            $this->setStatsTable($questionId, $statsTableBody);
        }
    }

    /**
     * Return the sum # of times the set of distractors were chosen
     *
     * @param $counts
     * @return int|number
     */
    private function calculateDistractorSelectionTotal($counts)
    {
        if (is_array($counts)) {
            return array_sum($counts);
        } else {
            return 0;
        }
    }

    /**
     * The national stats returned by R and the "selected group" stats returned by R can end up with test questions
     * in different orders. That means the map of R question key => Moodle Question ID is different for the national
     * stats. This utility function gets the proper key for the local table when provided the question ID
     * @param $questionId Moodle Question ID
     * @param array R stats array
     * @return mixed R stats question key
     */
    private function getMatchingRStatsQuestionKey($questionId, array $rStats)
    {
        return array_search($questionId, $rStats['pbsDi']['Question']);
    }

    /**
     * Calculate info for this distractor and add it to $statsTableBody
     *
     * @param $info
     * @param $highestIncorrectDistractorPBS
     * @param $correctDistractorPBS
     * @param $highestIncorrectNationalDistractorPBS
     * @param $correctNationalDistractorPBS
     * @param $distractorId
     * @param $questionId
     * @param $selectionTotal
     * @param $selectionNationalTotal
     * @param $statsTableBody
     * @return array The stats table with row added to it
     */
    private function addDistractorRowToStatsTable($info, $highestIncorrectDistractorPBS, $correctDistractorPBS, $highestIncorrectNationalDistractorPBS, $correctNationalDistractorPBS, $distractorId, $questionId, $selectionTotal, $selectionNationalTotal, $statsTableBody)
    {
        $highlightPbs = $this->shouldHighlightPBSValue($info['pbs'], $info['correct'], $highestIncorrectDistractorPBS, $correctDistractorPBS);
        $highlightNationalPbs = $this->shouldHighlightPBSValue($info['nationalPbs'], $info['correct'], $highestIncorrectNationalDistractorPBS, $correctNationalDistractorPBS);

        $distractorRow = array(
            $info['distractor'] . (($info['correct']) ? '*' : ''),
            $distractorId,
            array(
                'data' => (isset($this->distractorChoiceCounts[$questionId]) && isset($this->distractorChoiceCounts[$questionId][$info['distractor']])) ? $this->makeSelectionPercentage($this->distractorChoiceCounts[$questionId][$info['distractor']], $selectionTotal) : '---',
                'class' => 'center',
            ),
            array(
                'data' => $info['pbs'],
                'class' => ($highlightPbs) ? 'item-highlight center' : 'center',
            ),
            array(
                'data' => ($selectionNationalTotal > 0) ? $this->makeSelectionPercentage($this->nationalDistractorCounts[$questionId][$info['distractor']], $selectionNationalTotal) : '0%',
                'class' => 'center',
            ),
            array(
                'data' => $info['nationalPbs'],
                'class' => ($highlightNationalPbs) ? 'item-highlight center' : 'center',
            ),
        );
        if (!$info['correct']) {
            // incorrect distractors added to bottom of table
            $statsTableBody[] = $distractorRow;
            return $statsTableBody;
        } else {
            // correct distractor prepended to the top of the table
            array_unshift($statsTableBody, $distractorRow);
            return $statsTableBody;
        }
    }

    /**
     * Create an Item Row for this question
     *
     * @param $questionId
     * @param $difficultyIndex
     * @param $nationalDifficultyIndex
     * @return array
     */
    private function makeQuestionItemRow($questionId, $difficultyIndex, $nationalDifficultyIndex)
    {
        $questionItemRow = array(
            'Item',
            $this->test->itemIDSectionMap['moodle_blueprint_map'][$questionId], // label for distractor point biserial values
            array( // difficulty index for this question
                'data' => $this->makeDifficultyIndex($difficultyIndex),
                'class' => ($this->shouldHighlightDifficultyIndex($difficultyIndex)) ? 'item-highlight center' : 'center',
            ),
            '', // empty space for label for point biserial
            array( // NATIONAL difficult index
                'data' => (is_numeric($nationalDifficultyIndex)) ? $this->makeDifficultyIndex($nationalDifficultyIndex) : $nationalDifficultyIndex,
                'class' => (is_numeric($nationalDifficultyIndex) && ($this->shouldHighlightDifficultyIndex($nationalDifficultyIndex))) ? 'item-highlight center' : 'center',
            ),
            '', // empty space label for point biserial
        );
        return $questionItemRow;
    }

    /**
     * Set a complete stats table to $this->data
     *
     * @param $questionId
     * @param $statsTableBody
     */
    private function setStatsTable($questionId, $statsTableBody)
    {
        $titleSpanClass = (isset($this->questionsWithDiscrepantQuestionResponseData[$questionId])) ? 'notice' : '';
        $itemId = $this->test->itemIDSectionMap['moodle_blueprint_map'][$questionId];
        $this->data['item-' . $itemId] = array(
            'type' => 'table',
            'options' => array(
                'noSort' => true,
                'noSearch' => true,
                'noInfo' => true,
                'tableClass' => 'dataTable noInitDataTable',
                'csvTitle' => "Item $itemId"),
            'content' => array(
                'title' => '<span class="' . $titleSpanClass . '">Item ' . $itemId . '</span>
                        <span class="small gray-button"><a href="#" class="test-item-analysis-flag"
                        data-item-id="' . $itemId .
                    '"><img src="/images/flag-for-attention.png" border="0" alt="flag" /></a></span>',
                'nullMsg' => 'None found.',
                'head' => array(
                    array(
                        '',
                        'ID',
                        array('data' => 'Selected Group', 'colspan' => 2),
                        array('data' => 'National', 'colspan' => 2),
                    ),
                    array(
                        '',
                        '',
                        'Difficulty Index',
                        'Point Biserial',
                        'Difficulty Index',
                        'Point Biserial',
                    ),
                ),
                'body' => $statsTableBody,
            )
        );
    }


    /**
     * Override the MultistudentPicklist view helper's validation class (of the same name)
     * because we want some custom validation behavior specific to this report
     * Assume this picker is always in multi student mode
     *
     * @param $options
     * @return array
     */
    public function multistudentPicklistValidate($options)
    {
        $input = $input_id = "multistudent_picklist_selected";

        $selection = explode(',', $this->config[$input]);

        // make sure a student is chosen, but less than 76
        if (count($selection) < 1 || $selection[0] == "") {
            $this->errors[$input_id][] = "Please select one or more students";
        }

        // if this is a student, make sure they are the one chosen
        $user = \Fisdap\Entity\User::getLoggedInUser();
        if (!$user->isInstructor()) {
            if (count($selection) != 1 || $user->getCurrentRoleData()->id != $selection[0]) {
                $this->errors[$input_id][] = "You cannot view that student.";
            }
        }

        if (count($this->errors[$input_id])) {
            $this->valid = false;
        }
    }

    /**
    * Return a custom short label/description of the Test Item Analysis report
    * Overrides parent method
    */
    public function getShortConfigLabel()
    {
        // generate the form summary
        $this->getSummary('div');

        // return the label
        $label = $this->summaryParts['Exam'] . ": attempts from " . $this->summaryParts['Student(s)'];
        if ($this->summaryParts['Date range']) {
            $label .= " from " . $this->summaryParts['Date range'];
        }

        return $label;
    }


    /**
     * Get Question Responses from certain students for a certain moodle exam
     * Behavior changes depending on the $this->userPoolType chosen
     * Queries data from Moodle DBs (read-only), not the FISDAP DB
     * The $options array can be used to send in extra information and filters for the results.
     *
     * @param Array $options Array containing the following optional filter criteria:
     *        'start_date' - Determines the minimum date for the result set
     *        'end_state'  - Determines the maximum date for the result set
     *                       if not supplied, will retrieve for all students or students within supplied programID
     *
     * @return Array Array of results information. if $this->userPoolType is 'all' then info about a CSV file will be returned. Otherwise, $results['data'] will be an array of individual responses fetched from the DB
     */
    public function getQuestionResponses($options = array())
    {
        // set some defaults if not yet set
        if ($this->userPoolType == null) {
            $this->userPoolType = 'byUsername';
        }
        if ($this->userPoolCriteria == null) {
            $this->userPoolCriteria = array();
        }

        // Retrieve the answers query object
        $responsesQuery = $this->test->getQuestionAnswersDataQuery($this->userPoolType, $this->userPoolCriteria, $options);

        $results = array();

        // if we are getting ALL attempts, then we force into writing to a CSV file that R will parse, otherwise just array
        if ($this->userPoolType == 'all' || $this->userPoolType == 'byProgram' || count($this->userPoolCriteria) > 100) {
            $fileInfo = $this->getQuestionAnswersDataCSVFile($responsesQuery['statement']);
            $results['data'] = $fileInfo['fileName']; //$fileInfo['fileHandle'];
            $results['fileName'] = $fileInfo['fileName'];
            $results['dataType'] = 'file';
            $results['query'] = $responsesQuery['query'];
            unset($responsesQuery);
        } else {
            $results['data'] = $this->getQuestionAnswersDataArray($responsesQuery['statement']);
            $results['query'] = $responsesQuery['query'];
            unset($responsesQuery);
            $results['dataType'] = 'array';
        }
        return $results;
    }

    /**
     * Write a CSV file to tmp storage to contain data fetched from the database. Read later on by R for analysis.
     * This option is used to avoid memory usage problems that are associated with putting large results in arrays
     *
     * @param \Zend_Db_Statement $statement The Zend DB statement from getQuestionAnswersDataQuery()
     * @return array Information array about the CSV file including $info['fileName'] and $info['fileHandle']
     */
    private function getQuestionAnswersDataCSVFile(\Zend_Db_Statement $statement)
    {
        // open a CSV file for writing
        $dataFileName = tempnam(sys_get_temp_dir(), 'TestItemAnalysis');
        $dataFile = fopen($dataFileName, 'w');

        // write headers to CSV file
        //$firstRow = $statement->fetch();
        $headers = array(
            'Username',
            'Question',
            'Answer.State',
            'Answer',
            'Time',
        );
        fputcsv($dataFile, $headers);

        // write the rest of the rows
        while ($row = $statement->fetch()) {
            // format the row
            $row = $this->reformatQuestionAnswer($row);
            $distractorCode = $this->findMatchingCurrentDistractor($row);
            // only consider response for statistical analysis if it matches a current distractor
            if ($distractorCode) {
                $row['distractor_selected'] = $distractorCode;
                $this->addToDistractorCounts($row['question_id'], $distractorCode);
                $row = $this->reformatQuestionAnswerItemAnalysis($row);
                fputcsv($dataFile, $row);
            }
        }
        unset($statement);

        // allow others to read the file, eg the rserve user
        fclose($dataFile);
        chmod($dataFileName, 0644);

        // return the file handle to the CSV file
        $info = array(
            'fileName' => $dataFileName,
            //'fileHandle' => $dataFile
        );
        return $info;
    }

    /**
     * Return responses from DB in the form of an array. This is the standard method. Memory intensive for large sets.
     * @param \Zend_Db_Statement $statement The Zend DB statement from getQuestionAnswersDataQuery()
     * @return array Array of question responses
     */
    private function getQuestionAnswersDataArray(\Zend_Db_Statement $statement)
    {
        // simply fetchAll() to get all answers into an array
        $responses = $statement->fetchAll();

        foreach ($responses as $key => $response) {
            $response = $this->reformatQuestionAnswer($response);
            $distractorCode = $this->findMatchingCurrentDistractor($response);
            // only consider response for statistical analysis if it matches a current distractor
            if ($distractorCode) {
                $response['distractor_selected'] = $distractorCode;
                $responses[$key] = $response;
                $this->addToDistractorCounts($response['question_id'], $distractorCode);
            } else {
                unset($responses[$key]); // remove from the array if no valid distractor code is found
            }
        }

        return $responses;
    }

    /**
     * Reformat a question answer (response) with additional data needed for item analysis
     * @param array $answer A question answer from one of the getQuestionAnswers* methods
     * @return array
     */
    private function reformatQuestionAnswer($answer)
    {
        unset($answer['question_attempt_id']);

        // add properly formatted time
        $answer['time'] = date('Y-m-d', $answer['timestart']);

        return $answer;
    }

    private function findMatchingCurrentDistractor($answer)
    {
        // add in the distractor key to the data returned
        // and also get array of question_attempt_ids
        // get question distractor options
        $distractors = $this->test->get_moodleDistractors();
        $distractorSelected = false;

        // see if we can find a matching distractor based on exact match
        foreach ($distractors[$answer['question_id']] as $distractor) {
            // check if the distractor texts match. Try normalizing text
            if ($distractor['distractor'] == $answer['response_summary']) {
                $distractorSelected = $distractor['distractorCode'];
            }
        }

        if (!$distractorSelected) {
            // go through again, this time try normalizing text since we didn't find an exact match
            foreach ($distractors[$answer['question_id']] as $distractor) {
                if ($this->normalizeAnswerText($distractor['distractor']) == $this->normalizeAnswerText($answer['response_summary'])) {
                    $distractorSelected = $distractor['distractorCode']; //$answer['distractor_selected']
                }
            }
        }

        // we didn't find a matching distractor in the current question map
        if (!$distractorSelected) {
            // Set report-level properties so we know later to display warnings
            if ($answer['time'] > $this->latestDiscrepantQuestionResponseDate) {
                $this->latestDiscrepantQuestionResponseDate = $answer['time'];
            }
            $this->questionsWithDiscrepantQuestionResponseData[$answer['question_id']] = $answer['question_id'];
        }

        return $distractorSelected;
    }

    private function addToDistractorCounts($questionId, $distractorCode)
    {
        // add to the count of how often this distractor was selected for this question
        if (!isset($this->distractorChoiceCounts[$questionId])) {
            $this->distractorChoiceCounts[$questionId] = array();
        }
        if (!isset($this->distractorChoiceCounts[$questionId][$distractorCode])) {
            $this->distractorChoiceCounts[$questionId][$distractorCode] = 1;
        } else {
            $this->distractorChoiceCounts[$questionId][$distractorCode]++;
        }
    }

    /**
     * Reformat a question answer row to fit the item analysis format needed by R script
     */
    private function reformatQuestionAnswerItemAnalysis($row)
    {
        $newRow = array(
            'Username' => $row['username'],
            'Question' => $row['question_id'], ///$this->test->itemIDSectionMap['moodle_blueprint_map'][$row['question_id']],
            'Answer.State' => $row['answer_state'],
            'Answer' => $row['distractor_selected'],
            'Time' => $row['time'], // not sure if we actually need this
        );

        return $newRow;
    }

    private function normalizeAnswerText($text)
    {
        // make lowercase
        $text = strtolower($text);

        // eliminate HTML tags
        $text = $this->stripTagsFilter->filter($text);

        // eliminate special chars, leaving only alphanumeric
        $text = $this->stripSpecialCharsFilter->filter($text);

        // trim
        $text = trim($text);

        return $text;
    }


    /**
     * Difficulty Index and Point Biserial Calculation in R
     * Return a string of R code that will instruct R on how to calculate the stats we need.
     *
     * @param $dataFrameScript String script that will create the 'data' dataframe
     *
     * @return string String of R code
     */
    private function getItemAnalysisStatisticsRScript($dataFrameScript)
    {
        // load libraries
        $libraries = <<<'EOD'
## Load libraries
library(stringr)
library(plyr)

EOD;

        // this line has been taken out of the R script because we've replaced it with $dataFrameScript
        //data = read.csv("/home/jmortenson/projects/fisdap/blue_who_took_ee_answers.csv", header=TRUE)

        // perform calculation
        $calculation = <<<'EOD'

smmystat = function(data) {
## Change itemid to character string
data$Question = as.factor(data$Question)

### Get scored responses
data$resp = ifelse(data$Answer.State == "correct", 1, 0)
data$a = ifelse(data$Answer == "A", 1, 0)
data$b = ifelse(data$Answer == "B", 1, 0)
data$c = ifelse(data$Answer == "C", 1, 0)
data$d = ifelse(data$Answer == "D", 1, 0)

## Get total scores for each person
totscores = ddply(data, c("Username"), summarize, totscore = sum(resp))

## combine total scores with response data. combine by personid
data = merge(data, totscores, by="Username")

## Create total score minus item of interest
data$scoreminusitem = data$totscore - data$resp

items = unique(data$Question)
pbs.matrix = matrix(, nrow = length(items), 11)
for(i in 1:length(items)) {
  pbs.matrix[i,1] = items[i]
  pbs.matrix[i,2] = mean(data$resp[data$Question == items[i]], na.rm = TRUE)
  pbs.matrix[i,3] = cor(data$scoreminusitem[data$Question == items[i]], data$resp[data$Question == items[i]], use="pairwise.complete.obs")
  pbs.matrix[i,4] = mean(data$a[data$Question == items[i]], na.rm = TRUE)
  pbs.matrix[i,5] = cor(data$scoreminusitem[data$Question == items[i]], data$a[data$Question == items[i]], use="pairwise.complete.obs")
  pbs.matrix[i,6] = mean(data$b[data$Question == items[i]], na.rm = TRUE)
  pbs.matrix[i,7] = cor(data$scoreminusitem[data$Question == items[i]], data$b[data$Question == items[i]], use="pairwise.complete.obs")
  pbs.matrix[i,8] = mean(data$c[data$Question == items[i]], na.rm = TRUE)
  pbs.matrix[i,9] = cor(data$scoreminusitem[data$Question == items[i]], data$c[data$Question == items[i]], use="pairwise.complete.obs")
  pbs.matrix[i,10] = mean(data$d[data$Question == items[i]], na.rm = TRUE)
  pbs.matrix[i,11] = cor(data$scoreminusitem[data$Question == items[i]], data$d[data$Question == items[i]], use="pairwise.complete.obs")
}
pbs.matrix = data.frame(pbs.matrix) # restructure data
pbs.matrix[1] = items
names(pbs.matrix) = c("Question", "Correct Response - Difficulty", "Correct Response - PBS", "Option A - Difficulty", "Option A - PBS", "Option B - Difficulty", "Option B - PBS", "Option C - Difficulty", "Option C - PBS", "Option D - Difficulty", "Option D - PBS")
item_summary = pbs.matrix
rm(pbs.matrix, items, totscores, i)
data$scoreminusitem = NULL
data$totscore = NULL
data$resp = NULL
data$a = NULL
data$b = NULL
data$c = NULL
data$d = NULL
print(item_summary)
}

smmystat(data)
EOD;

        return $libraries . $dataFrameScript . $calculation;
    }


    /**
     * Cronbach's Alpha Calculation in R
     * Return a string of R code
     *
     * @param $dataFrameScript String script that will create the 'data' dataframe
     *
     * @return string String of R code
     */
    private function getCronbachRScript($dataFrameScript)
    {
        // load libraries
        $libraries = <<<'EOD'
## Load libraries
library(reshape)
library(psy)

EOD;
        // perform calculation
        $calculation = <<<'EOD'

x=data
cronbachsalpha = function(x){
  require(reshape)
  require(psy)
  x$resp = ifelse(x$Answer.State == "correct", 1, 0)
  data2 = x[c("Question", "Username", "resp")]
  data2 = reshape(data2, direction="wide", idvar="Username", timevar="Question", v.names="resp")
  data2[is.na(data2)] = 0
  cronbach(data2[2:ncol(data2)])$alpha
}

cronbachsalpha(data)

EOD;

        return $libraries . $dataFrameScript . $calculation;
    }

    /**
     * Format MySQL data from Moodle DB from $this->test->getQuestionResponses() to array needed for R dataframe
     * @param $responses array Array of data from Moodle DB
     * @return array Array of data that fits format/keys needed by getItemAnalysisStatisticsRScript
     */
    private function formatQuestionResponsesForItemAnalysis($responses)
    {
        // process into an array of vectors, which will be built into an R data frame as input for calculations
        $responseDataFrame = array(
            'Username' => array(),
            'Question' => array(),
            'Answer.State' => array(),
            'Answer' => array(),
            'Time' => array(), // not sure if we actually need this
        );
        foreach ($responses as $response) {
            $responseDataFrame['Username'][] = $response['username'];
            $responseDataFrame['Question'][] = $response['question_id'];
            $responseDataFrame['Answer.State'][] = $response['answer_state'];
            $responseDataFrame['Answer'][] = $response['distractor_selected'];
            $responseDataFrame['Time'][] = $response['time'];
        }

        return $responseDataFrame;
    }

    /**
     * Decide if we need to highlight the table cell as problematic
     * @param $pbsValue float
     * @param $isCorrectResponse boolean
     * @param $highestIncorrectDistractorPBS
     * @param $correctDistractorPBS
     * @return bool Whether this value should be highlighted or not
     */
    private function shouldHighlightPBSValue($pbsValue, $isCorrectResponse, $highestIncorrectDistractorPBS, $correctDistractorPBS)
    {
        // highlight if any incorrect response is greater than or equal to the correct response's PBS
        if (!$isCorrectResponse && is_numeric($pbsValue) && $pbsValue >= $correctDistractorPBS) {
            $highlightPbs = true;
        // highlight if the correct response is less than or equal to the highest incorrect response PBS
        } elseif ($isCorrectResponse && (!is_numeric($pbsValue) || $pbsValue <= $highestIncorrectDistractorPBS)) {
            $highlightPbs = true;
        } else {
            $highlightPbs = false;
        }

        return $highlightPbs;
    }

    /**
     * @param $difficultyIndex
     * @return bool
     */
    private function shouldHighlightDifficultyIndex($difficultyIndex)
    {
        return is_numeric($difficultyIndex) && ($difficultyIndex <= .4 || $difficultyIndex >= .93);
    }

    /**
     * @return array
     */
    private function makeNoResultsTable()
    {
        $emptyTable = array(
            'type' => 'table',
            'options' => array('noSort' => true, 'noSearch' => true, 'noInfo' => true, 'tableClass' => 'dataTable noInitDataTable'),
            'content' => array(
                'title' => 'Did not find any test attempts matching these criteria. Please try a different group of students or a different test.',
                'nullMsg' => '---',
                'head' => array(),
                'body' => array(),
            )
        );
        return $emptyTable;
    }

    /**
     * @param $questionResponses
     * @param $pbsDiScript
     * @param $cronbachScript
     * @throws Zend_Mail_Exception
     */
    private function sendStatsDebugMail($questionResponses, $pbsDiScript, $cronbachScript)
    {
        $mail = new Zend_Mail();
        $body = '';
        if (isset($questionResponses['filename'])) {
            $body .= "Source file created at: " . $questionResponses['fileName'];
        }
        $body .= "\n\nRscripts Run: \n\n" . $pbsDiScript . "\n\n" . $cronbachScript
            . "\n\n" . print_r($this->rAnalysisResults, true);
        $mail->setBodyText($body);
        $mail->setFrom('robot@fisdap.net', 'Fisdap Robot');
        $mail->addTo('jmortenson@fisdap.net', 'Jesse Mortenson');
        $mail->setSubject('R results on ' . $this->test->get_test_name());
        $mail->send();
    }

    /**
     * Calculate and format a distractor selection percentage for display
     *
     * @param $distractorCount integer Number of times this distractor was selected
     * @param $selectionTotal integer Number of times any distractor/response for this question was selected
     * @return string
     */
    private function makeSelectionPercentage($distractorCount, $selectionTotal)
    {
        return round(($distractorCount / $selectionTotal) * 100) . '%';
    }

    /**
     * Calculate and format a difficulty index value for display
     *
     * @param $difficultyIndex
     * @return string
     */
    private function makeDifficultyIndex($difficultyIndex)
    {
        return round(($difficultyIndex * 100)) . '%';
    }

    /**
     * Process properties on $this->config to check values and return an array of query filter options
     *
     * @return array Query filter options
     * @throws Exception
     */
    public function makeFilterFromConfig()
    {
        // process report configuration to change filters
        $filter = array();
        if ($this->config['dateRange']['startDate'] != '') {
            $filter['start_date'] = $this->config['dateRange']['startDate'];
        }
        if ($this->config['dateRange']['endDate'] != '') {
            $filter['end_date'] = $this->config['dateRange']['endDate'];
        }
        if ($this->config['test_id']) {
            $this->test = \Fisdap\EntityUtils::getEntity('MoodleTestDataLegacy', $this->config['test_id']);
        }
        if ($this->config['attempt']) {
            $this->attempt = $this->config['attempt'];
            $filter['includeAttempts'] = $this->config['attempt'];
        }
        if ($this->config['multistudent_picklist_selected'] != '') {
            $studentIds = explode(',', $this->config['multistudent_picklist_selected']);
            $fields = array('u' => array('username', 'id'));
            $studentRepo = \Fisdap\EntityUtils::getRepository('StudentLegacy');
            $userData = $studentRepo->getStudentUserData($studentIds, $fields);
            $this->userPoolCriteria = $studentIds = array();
            foreach ($userData as $row) {
                $this->userPoolCriteria[] = $row['username'];
            }
            $this->userPoolType = 'byUsername';
        }

        // typically userPoolType is not submitted with the form, but scripts may want to run this report
        // with a specific userPoolType
        if ($this->config['userPoolType'] && ($this->config['userPoolType'] == 'all' || $this->config['userPoolCriteria'])) {
            $this->userPoolType = $this->config['userPoolType'];
            $this->userPoolCriteria = $this->config['userPoolCriteria'];
        }

        // do we have the information we need?
        if (!$this->config['test_id'] || !$this->test instanceof \Fisdap\Entity\MoodleTestDataLegacy || ($this->userPoolType != 'all' && empty($this->userPoolCriteria))) {
            throw new Exception('An invalid test or an empty set of students was submitted to the Test Item Analysis report.
            Cannot generate report.');
        }

        return $filter;
    }
}
