<?php

namespace DoctrineORMModule\Proxy\__CG__\User\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ShiftLegacy extends \User\Entity\ShiftLegacy implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'student', 'site', 'base', 'start_date', 'start_time', 'end_time', 'hours', 'entry_time', 'locked', 'signoff', 'verification', 'type', 'event_id', 'trade', 'trade_status', 'audited', 'tardy', 'first_locked', 'completed_from', 'pda_shift_id', 'late', 'attendence', 'attendence_comments', 'soft_deleted', 'start_datetime', 'end_datetime', 'creator', 'runs', 'patients', 'meds', 'airways', 'ivs', 'cardiac_interventions', 'other_interventions', 'narratives', 'vitals', 'lab_skills', 'histories', 'practice_items', 'slot_assignment', 'eval_sessions', 'invalidPatients', 'missingEvals', 'attachments'];
        }

        return ['__isInitialized__', 'id', 'student', 'site', 'base', 'start_date', 'start_time', 'end_time', 'hours', 'entry_time', 'locked', 'signoff', 'verification', 'type', 'event_id', 'trade', 'trade_status', 'audited', 'tardy', 'first_locked', 'completed_from', 'pda_shift_id', 'late', 'attendence', 'attendence_comments', 'soft_deleted', 'start_datetime', 'end_datetime', 'creator', 'runs', 'patients', 'meds', 'airways', 'ivs', 'cardiac_interventions', 'other_interventions', 'narratives', 'vitals', 'lab_skills', 'histories', 'practice_items', 'slot_assignment', 'eval_sessions', 'invalidPatients', 'missingEvals', 'attachments'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ShiftLegacy $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setStart_datetime(\DateTime $dateTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStart_datetime', [$dateTime]);

        return parent::setStart_datetime($dateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function set_start_datetime(\DateTime $dateTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'set_start_datetime', [$dateTime]);

        return parent::set_start_datetime($dateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function get_start_datetime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get_start_datetime', []);

        return parent::get_start_datetime();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnd_datetime(\DateTime $dateTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnd_datetime', [$dateTime]);

        return parent::setEnd_datetime($dateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function set_end_datetime(\DateTime $dateTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'set_end_datetime', [$dateTime]);

        return parent::set_end_datetime($dateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function get_end_datetime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get_end_datetime', []);

        return parent::get_end_datetime();
    }

    /**
     * {@inheritDoc}
     */
    public function set_attendence($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'set_attendence', [$value]);

        return parent::set_attendence($value);
    }

    /**
     * {@inheritDoc}
     */
    public function set_student($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'set_student', [$value]);

        return parent::set_student($value);
    }

    /**
     * {@inheritDoc}
     */
    public function setStudent($student)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStudent', [$student]);

        return parent::setStudent($student);
    }

    /**
     * {@inheritDoc}
     */
    public function getStudent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStudent', []);

        return parent::getStudent();
    }

    /**
     * {@inheritDoc}
     */
    public function set_creator($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'set_creator', [$value]);

        return parent::set_creator($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getShortSummary()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortSummary', []);

        return parent::getShortSummary();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirst_locked(\DateTime $dateTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirst_locked', [$dateTime]);

        return parent::setFirst_locked($dateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function setSite(\User\Entity\SiteLegacy $site)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSite', [$site]);

        return parent::setSite($site);
    }

    /**
     * {@inheritDoc}
     */
    public function getSite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSite', []);

        return parent::getSite();
    }

    /**
     * {@inheritDoc}
     */
    public function setBase(\User\Entity\BaseLegacy $base)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBase', [$base]);

        return parent::setBase($base);
    }

    /**
     * {@inheritDoc}
     */
    public function getBase()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBase', []);

        return parent::getBase();
    }

    /**
     * {@inheritDoc}
     */
    public function getHours()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHours', []);

        return parent::getHours();
    }

    /**
     * {@inheritDoc}
     */
    public function setHours($hours)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHours', [$hours]);

        return parent::setHours($hours);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttendanceComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttendanceComments', []);

        return parent::getAttendanceComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttendanceComments($comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttendanceComments', [$comments]);

        return parent::setAttendanceComments($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttendance(\User\Entity\ShiftAttendence $attendance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttendance', [$attendance]);

        return parent::setAttendance($attendance);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttendance()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttendance', []);

        return parent::getAttendance();
    }

    /**
     * {@inheritDoc}
     */
    public function lockShift($lock)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'lockShift', [$lock]);

        return parent::lockShift($lock);
    }

    /**
     * {@inheritDoc}
     */
    public function setLocked($locked)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocked', [$locked]);

        return parent::setLocked($locked);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocked()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocked', []);

        return parent::getLocked();
    }

    /**
     * {@inheritDoc}
     */
    public function addPatient(\User\Entity\Patient $patient)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPatient', [$patient]);

        return parent::addPatient($patient);
    }

    /**
     * {@inheritDoc}
     */
    public function removePatient(\User\Entity\Patient $patient)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePatient', [$patient]);

        return parent::removePatient($patient);
    }

    /**
     * {@inheritDoc}
     */
    public function addRun(\User\Entity\Run $run)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRun', [$run]);

        return parent::addRun($run);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRun(\User\Entity\Run $run)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRun', [$run]);

        return parent::removeRun($run);
    }

    /**
     * {@inheritDoc}
     */
    public function addMed(\User\Entity\Med $med)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMed', [$med]);

        return parent::addMed($med);
    }

    /**
     * {@inheritDoc}
     */
    public function addCardiacIntervention(\User\Entity\CardiacIntervention $cardiac)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCardiacIntervention', [$cardiac]);

        return parent::addCardiacIntervention($cardiac);
    }

    /**
     * {@inheritDoc}
     */
    public function addOtherIntervention(\User\Entity\OtherIntervention $other)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOtherIntervention', [$other]);

        return parent::addOtherIntervention($other);
    }

    /**
     * {@inheritDoc}
     */
    public function addAirway(\User\Entity\Airway $air)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAirway', [$air]);

        return parent::addAirway($air);
    }

    /**
     * {@inheritDoc}
     */
    public function addIv(\User\Entity\Iv $iv)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addIv', [$iv]);

        return parent::addIv($iv);
    }

    /**
     * {@inheritDoc}
     */
    public function addNarrative(\User\Entity\Narrative $narrative)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addNarrative', [$narrative]);

        return parent::addNarrative($narrative);
    }

    /**
     * {@inheritDoc}
     */
    public function addVital(\User\Entity\Vital $vital)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addVital', [$vital]);

        return parent::addVital($vital);
    }

    /**
     * {@inheritDoc}
     */
    public function addLabSkill(\User\Entity\LabSkill $labSkill)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLabSkill', [$labSkill]);

        return parent::addLabSkill($labSkill);
    }

    /**
     * {@inheritDoc}
     */
    public function addPracticeItem(\User\Entity\PracticeItem $item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPracticeItem', [$item]);

        return parent::addPracticeItem($item);
    }

    /**
     * {@inheritDoc}
     */
    public function removePracticeItem(\User\Entity\PracticeItem $item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePracticeItem', [$item]);

        return parent::removePracticeItem($item);
    }

    /**
     * {@inheritDoc}
     */
    public function recordHistory($changeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'recordHistory', [$changeType]);

        return parent::recordHistory($changeType);
    }

    /**
     * {@inheritDoc}
     */
    public function calculateEndTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'calculateEndTime', []);

        return parent::calculateEndTime();
    }

    /**
     * {@inheritDoc}
     */
    public function convertShiftDates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'convertShiftDates', []);

        return parent::convertShiftDates();
    }

    /**
     * {@inheritDoc}
     */
    public function hasComments($viewingUserId = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasComments', [$viewingUserId]);

        return parent::hasComments($viewingUserId);
    }

    /**
     * {@inheritDoc}
     */
    public function isQuickAdd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isQuickAdd', []);

        return parent::isQuickAdd();
    }

    /**
     * {@inheritDoc}
     */
    public function isStudentCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isStudentCreated', []);

        return parent::isStudentCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function getAssociatedSkills($studentID)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssociatedSkills', [$studentID]);

        return parent::getAssociatedSkills($studentID);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteQuickSkills()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'deleteQuickSkills', []);

        return parent::deleteQuickSkills();
    }

    /**
     * {@inheritDoc}
     */
    public function getVerifiedRuns()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVerifiedRuns', []);

        return parent::getVerifiedRuns();
    }

    /**
     * {@inheritDoc}
     */
    public function setVerification(\User\Entity\Verification $ver = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVerification', [$ver]);

        return parent::setVerification($ver);
    }

    /**
     * {@inheritDoc}
     */
    public function getVerificationArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVerificationArray', []);

        return parent::getVerificationArray();
    }

    /**
     * {@inheritDoc}
     */
    public function unsetVerification()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unsetVerification', []);

        return parent::unsetVerification();
    }

    /**
     * {@inheritDoc}
     */
    public function getVerification()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVerification', []);

        return parent::getVerification();
    }

    /**
     * {@inheritDoc}
     */
    public function getNumVerifiedRuns()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumVerifiedRuns', []);

        return parent::getNumVerifiedRuns();
    }

    /**
     * {@inheritDoc}
     */
    public function getNumRuns()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumRuns', []);

        return parent::getNumRuns();
    }

    /**
     * {@inheritDoc}
     */
    public function getCriticalThinkingTriggers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCriticalThinkingTriggers', []);

        return parent::getCriticalThinkingTriggers();
    }

    /**
     * {@inheritDoc}
     */
    public function isFuture()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFuture', []);

        return parent::isFuture();
    }

    /**
     * {@inheritDoc}
     */
    public function isEditable($user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEditable', [$user]);

        return parent::isEditable($user);
    }

    /**
     * {@inheritDoc}
     */
    public function isShiftScheduleEditable($user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isShiftScheduleEditable', [$user]);

        return parent::isShiftScheduleEditable($user);
    }

    /**
     * {@inheritDoc}
     */
    public function isViewable($user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isViewable', [$user]);

        return parent::isViewable($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getSkillCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSkillCount', []);

        return parent::getSkillCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function getRunType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRunType', []);

        return parent::getRunType();
    }

    /**
     * {@inheritDoc}
     */
    public function deleteEmptyRuns()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'deleteEmptyRuns', []);

        return parent::deleteEmptyRuns();
    }

    /**
     * {@inheritDoc}
     */
    public function isValid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isValid', []);

        return parent::isValid();
    }

    /**
     * {@inheritDoc}
     */
    public function getInvalidPatients()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInvalidPatients', []);

        return parent::getInvalidPatients();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuickAddedSkills()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuickAddedSkills', []);

        return parent::getQuickAddedSkills();
    }

    /**
     * {@inheritDoc}
     */
    public function getHookIds()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHookIds', []);

        return parent::getHookIds();
    }

    /**
     * {@inheritDoc}
     */
    public function copyShiftForLabPartner(\User\Entity\StudentLegacy $student)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'copyShiftForLabPartner', [$student]);

        return parent::copyShiftForLabPartner($student);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitleDateTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitleDateTime', []);

        return parent::getTitleDateTime();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocation', []);

        return parent::getLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function getZoomViewTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getZoomViewTitle', []);

        return parent::getZoomViewTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getDetailViewDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDetailViewDate', []);

        return parent::getDetailViewDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getDurationText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDurationText', []);

        return parent::getDurationText();
    }

    /**
     * {@inheritDoc}
     */
    public function getParentEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentEvent', []);

        return parent::getParentEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function getInstructorList()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInstructorList', []);

        return parent::getInstructorList();
    }

    /**
     * {@inheritDoc}
     */
    public function getPreceptorList()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPreceptorList', []);

        return parent::getPreceptorList();
    }

    /**
     * {@inheritDoc}
     */
    public function getPreceptorText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPreceptorText', []);

        return parent::getPreceptorText();
    }

    /**
     * {@inheritDoc}
     */
    public function hasData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasData', []);

        return parent::hasData();
    }

    /**
     * {@inheritDoc}
     */
    public function removeFromEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeFromEvent', []);

        return parent::removeFromEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function delete($flush = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', [$flush]);

        return parent::delete($flush);
    }

    /**
     * {@inheritDoc}
     */
    public function setEntry_time(\DateTime $entry_time)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntry_time', [$entry_time]);

        return parent::setEntry_time($entry_time);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachments', []);

        return parent::getAttachments();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachmentById($attachmentId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachmentById', [$attachmentId]);

        return parent::getAttachmentById($attachmentId);
    }

    /**
     * {@inheritDoc}
     */
    public function addAttachment(\Fisdap\Attachments\Entity\Attachment $attachment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAttachment', [$attachment]);

        return parent::addAttachment($attachment);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAttachment(\Fisdap\Attachments\Entity\Attachment $attachment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAttachment', [$attachment]);

        return parent::removeAttachment($attachment);
    }

}
